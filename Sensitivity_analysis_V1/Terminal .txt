> library(tidyverse)
── Attaching core tidyverse packages ─────────────────────────────────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.4     
── Conflicts ───────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package to force all conflicts to become errors
> library(scales)

Attaching package: ‘scales’

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor

> library(foreach)

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Load helper functions
> source("./99_Functions.R")
> 
> # Read in 2030 population estimates, costs, and coverage
> df_prevalence <- readRDS("./Data/est_2030.rds")
> df_costs_base <- readRDS("./Data/costs.rds")
> df_coverage_base <- readRDS("./Data/coverage.rds")
> df_coverage_base[,c(3, 5, 7, 9)] <- 0
> 
> # Add a global WTP threshold
> df_costs_base$WTP_Global <- mean(df_costs_base$WTP_Opp_Upper)
> df_costs_base$WTP_Near_Infinite <- 10^10
> 
> # Using 1 iteration per draw
> iter <- 1
> 
> # Filter by countries with data for all three input data frames
> df_prevalence <- df_prevalence |>
+   filter(location_name %in% Reduce(intersect, list(
+     df_prevalence$location_name,
+     df_costs_base$location_name,
+     df_coverage_base$location_name
+   )))
> 
> # Get full country list
> countrylist <- unique(df_prevalence$location_name)
> 
> # Which WTP threshold to use?
> # NB: "Opp_Upper" corresponds to Pichon-Riviere opportunity cost method (base case)
> WTP_list <- c("Opp_Upper", "HCFI_Lower", "Near_Infinite")
> Threshold <- WTP_list[3]
> 
> WTP <- df_costs_base |>
+   select(
+     location_name,
+     paste0("WTP_", Threshold)
+   ) |>
+   rename(
+     Country = location_name,
+     WTP = paste0("WTP_", Threshold)
+   )
> 
> 
> # List of interventions:
> interventions <- c(
+   "Iron_Preg", # Iron and folic acid supplementation in pregnant women
+   "Iron_WRA", # Iron supplementation in WRA
+   "Fortification", # Staple food supplementation in all individuals
+   "Antimalarial" # Antenatal intermittent antimalarials
+ )
> 
> # Set number of iterations
> n <- 1
> 
> # Prepare parallel computing
> cores <- detectCores()
> cl <- makeCluster(10)
> registerDoParallel(cl)
> 
> # Run model
> set.seed(888)
> sim_results <- foreach(
+   j = 1:n, .combine = "comb", .multicombine = TRUE, .init = list(list(), list()),
+   .export = ls(), .packages = c("tidyverse", "EnvStats")
+ ) %dopar% {
+   tryCatch(source("1_Run_model.R", local = T))
+   
+   list(
+     df_final |>
+       rename(
+         Pop_pregnant_anaemic_post = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_post = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_post = Pop_anaemic,
+         YLD_post = YLD
+       ) |>
+       full_join(df_2030,
+                 by = join_by(location_name, rei_name, Pop_wra, Pop_total, Pop_pregnant)
+       ) |>
+       mutate(
+         Change_anaemic = Pop_anaemic_post - Pop_anaemic,
+         Pct_change_anaemic = Change_anaemic / Pop_anaemic
+       ) |>
+       rename(
+         Country = location_name,
+         Anaemia_severity = rei_name,
+         Pop_pregnant_anaemic_pre = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_pre = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_pre = Pop_anaemic,
+         YLD_pre = YLD
+       ) |>
+       group_by(Country) |>
+       summarise(
+         anaemic_pre = sum(Pop_anaemic_pre),
+         anaemic_post = sum(Pop_anaemic_post),
+         YLD_pre = sum(YLD_pre),
+         YLD_post = sum(YLD_post)
+       ) |>
+       mutate(
+         Pct_change_anaemic = (anaemic_pre - anaemic_post) / anaemic_pre,
+         DALYs_averted = YLD_post - YLD_pre,
+         Pct_change_YLD = (YLD_pre - YLD_post) / YLD_pre,
+         Iteration = j
+       ),
+     cea |>
+       mutate(Iteration = j)
+   )
+ }
> 
> results <- do.call(rbind, sim_results[[1]])
> if (Threshold == "Opp_Upper") {
+   league_tables <- do.call(rbind, sim_results[[2]])
+   write_csv(league_tables, file = "./Sensitivity_analysis/league_tables.csv")
+ }
> 
> if (nrow(results) > nrow(na.omit(results))) results <- replace_empty(results)
> 
> write_csv(results, file = paste0("./Sensitivity_analysis/sim_results_", Threshold, ".csv"))
> 
> 
> change <- results |>
+   group_by(Country) |>
+   summarise(
+     change_median = median(Pct_change_anaemic, na.rm = T),
+     change_low = quantile(Pct_change_anaemic, 0.025, na.rm = T),
+     change_high = quantile(Pct_change_anaemic, 0.975, na.rm = T),
+     DALYs_prevented_median = median(DALYs_averted, na.rm = T),
+     DALYs_prevented_low = quantile(DALYs_averted, 0.975, na.rm = T),
+     DALYs_prevented_high = quantile(DALYs_averted, 0.025, na.rm = T)
+   )
> 
> write_csv(change, file = paste0("./Sensitivity_analysis/targets_", Threshold, ".csv"))
> mean(change$change_median)
[1] 0.48765
> options(scipen = 999, digits = 5)
> 
> library(countrycode)
> library(EnvStats)
> library(tidyverse)
> library(scales)
> library(foreach)
> library(doParallel)
> 
> # Load helper functions
> source("./99_Functions.R")
> 
> # Read in 2030 population estimates, costs, and coverage
> df_prevalence <- readRDS("./Data/est_2030.rds")
> df_costs_base <- readRDS("./Data/costs.rds")
> df_coverage_base <- readRDS("./Data/coverage.rds")
> df_coverage_base[,c(3, 5, 7, 9)] <- 0
> 
> # Add a global WTP threshold
> df_costs_base$WTP_Global <- mean(df_costs_base$WTP_Opp_Upper)
> df_costs_base$WTP_Near_Infinite <- 10^10
> 
> # Using 1 iteration per draw
> iter <- 1
> 
> # Filter by countries with data for all three input data frames
> df_prevalence <- df_prevalence |>
+   filter(location_name %in% Reduce(intersect, list(
+     df_prevalence$location_name,
+     df_costs_base$location_name,
+     df_coverage_base$location_name
+   )))
> 
> # Get full country list
> countrylist <- unique(df_prevalence$location_name)
> 
> # Which WTP threshold to use?
> # NB: "Opp_Upper" corresponds to Pichon-Riviere opportunity cost method (base case)
> WTP_list <- c("Opp_Upper", "HCFI_Lower", "Near_Infinite")
> Threshold <- WTP_list[3]
> 
> WTP <- df_costs_base |>
+   select(
+     location_name,
+     paste0("WTP_", Threshold)
+   ) |>
+   rename(
+     Country = location_name,
+     WTP = paste0("WTP_", Threshold)
+   )
> 
> 
> # List of interventions:
> interventions <- c(
+   "Iron_Preg", # Iron and folic acid supplementation in pregnant women
+   "Iron_WRA", # Iron supplementation in WRA
+   "Fortification", # Staple food supplementation in all individuals
+   "Antimalarial" # Antenatal intermittent antimalarials
+ )
> 
> # Set number of iterations
> n <- 400
> 
> # Prepare parallel computing
> cores <- detectCores()
> cl <- makeCluster(10)
> registerDoParallel(cl)
> 
> # Run model
> set.seed(888)
> sim_results <- foreach(
+   j = 1:n, .combine = "comb", .multicombine = TRUE, .init = list(list(), list()),
+   .export = ls(), .packages = c("tidyverse", "EnvStats")
+ ) %dopar% {
+   tryCatch(source("1_Run_model.R", local = T))
+   
+   list(
+     df_final |>
+       rename(
+         Pop_pregnant_anaemic_post = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_post = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_post = Pop_anaemic,
+         YLD_post = YLD
+       ) |>
+       full_join(df_2030,
+                 by = join_by(location_name, rei_name, Pop_wra, Pop_total, Pop_pregnant)
+       ) |>
+       mutate(
+         Change_anaemic = Pop_anaemic_post - Pop_anaemic,
+         Pct_change_anaemic = Change_anaemic / Pop_anaemic
+       ) |>
+       rename(
+         Country = location_name,
+         Anaemia_severity = rei_name,
+         Pop_pregnant_anaemic_pre = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_pre = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_pre = Pop_anaemic,
+         YLD_pre = YLD
+       ) |>
+       group_by(Country) |>
+       summarise(
+         anaemic_pre = sum(Pop_anaemic_pre),
+         anaemic_post = sum(Pop_anaemic_post),
+         YLD_pre = sum(YLD_pre),
+         YLD_post = sum(YLD_post)
+       ) |>
+       mutate(
+         Pct_change_anaemic = (anaemic_pre - anaemic_post) / anaemic_pre,
+         DALYs_averted = YLD_post - YLD_pre,
+         Pct_change_YLD = (YLD_pre - YLD_post) / YLD_pre,
+         Iteration = j
+       ),
+     cea |>
+       mutate(Iteration = j)
+   )
+ }
> 
> results <- do.call(rbind, sim_results[[1]])
Warning messages:
1: In for (j in pseq) { :
  closing unused connection 12 (<-ParsasROGG16:11072)
2: In for (j in pseq) { :
  closing unused connection 11 (<-ParsasROGG16:11072)
3: In for (j in pseq) { :
  closing unused connection 10 (<-ParsasROGG16:11072)
4: In for (j in pseq) { :
  closing unused connection 9 (<-ParsasROGG16:11072)
5: In for (j in pseq) { :
  closing unused connection 8 (<-ParsasROGG16:11072)
6: In for (j in pseq) { :
  closing unused connection 7 (<-ParsasROGG16:11072)
7: In for (j in pseq) { :
  closing unused connection 6 (<-ParsasROGG16:11072)
8: In for (j in pseq) { :
  closing unused connection 5 (<-ParsasROGG16:11072)
9: In for (j in pseq) { :
  closing unused connection 4 (<-ParsasROGG16:11072)
10: In for (j in pseq) { :
  closing unused connection 3 (<-ParsasROGG16:11072)
> if (Threshold == "Opp_Upper") {
+   league_tables <- do.call(rbind, sim_results[[2]])
+   write_csv(league_tables, file = "./Sensitivity_analysis/league_tables.csv")
+ }
> 
> if (nrow(results) > nrow(na.omit(results))) results <- replace_empty(results)
> 
> write_csv(results, file = paste0("./Sensitivity_analysis/sim_results_", Threshold, ".csv"))
> 
> 
> change <- results |>
+   group_by(Country) |>
+   summarise(
+     change_median = median(Pct_change_anaemic, na.rm = T),
+     change_low = quantile(Pct_change_anaemic, 0.025, na.rm = T),
+     change_high = quantile(Pct_change_anaemic, 0.975, na.rm = T),
+     DALYs_prevented_median = median(DALYs_averted, na.rm = T),
+     DALYs_prevented_low = quantile(DALYs_averted, 0.975, na.rm = T),
+     DALYs_prevented_high = quantile(DALYs_averted, 0.025, na.rm = T)
+   )
> 
> write_csv(change, file = paste0("./Sensitivity_analysis/targets_", Threshold, ".csv"))
> mean(change$change_median)
[1] 0.34143
> options(scipen = 999, digits = 5)
> 
> library(countrycode)
> library(EnvStats)
> library(tidyverse)
> library(scales)
> library(foreach)
> library(doParallel)
> 
> # Load helper functions
> source("./99_Functions.R")
> 
> # Read in 2030 population estimates, costs, and coverage
> df_prevalence <- readRDS("./Data/est_2030.rds")
> df_costs_base <- readRDS("./Data/costs.rds")
> df_coverage_base <- readRDS("./Data/coverage.rds")
> df_coverage_base[,c(3, 5, 7, 9)] <- 0
> 
> # Add a global WTP threshold
> df_costs_base$WTP_Global <- mean(df_costs_base$WTP_Opp_Upper)
> df_costs_base$WTP_Near_Infinite <- 10^10
> 
> # Using 1 iteration per draw
> iter <- 1
> 
> # Filter by countries with data for all three input data frames
> df_prevalence <- df_prevalence |>
+   filter(location_name %in% Reduce(intersect, list(
+     df_prevalence$location_name,
+     df_costs_base$location_name,
+     df_coverage_base$location_name
+   )))
> 
> # Get full country list
> countrylist <- unique(df_prevalence$location_name)
> 
> # Which WTP threshold to use?
> # NB: "Opp_Upper" corresponds to Pichon-Riviere opportunity cost method (base case)
> WTP_list <- c("Opp_Upper", "HCFI_Lower", "Near_Infinite")
> Threshold <- WTP_list[1]
> 
> WTP <- df_costs_base |>
+   select(
+     location_name,
+     paste0("WTP_", Threshold)
+   ) |>
+   rename(
+     Country = location_name,
+     WTP = paste0("WTP_", Threshold)
+   )
> 
> 
> # List of interventions:
> interventions <- c(
+   "Iron_Preg", # Iron and folic acid supplementation in pregnant women
+   "Iron_WRA", # Iron supplementation in WRA
+   "Fortification", # Staple food supplementation in all individuals
+   "Antimalarial" # Antenatal intermittent antimalarials
+ )
> 
> # Set number of iterations
> n <- 400
> 
> # Prepare parallel computing
> cores <- detectCores()
> cl <- makeCluster(10)
> options(scipen = 999, digits = 5)
> 
> library(countrycode)
> library(EnvStats)
> library(tidyverse)
> library(scales)
> library(foreach)
> library(doParallel)
> 
> # Load helper functions
> source("./99_Functions.R")
> 
> # Read in 2030 population estimates, costs, and coverage
> df_prevalence <- readRDS("./Data/est_2030.rds")
> df_costs_base <- readRDS("./Data/costs.rds")
> df_coverage_base <- readRDS("./Data/coverage.rds")
> df_coverage_base[,c(3, 5, 7, 9)] <- 0
> 
> # Add a global WTP threshold
> df_costs_base$WTP_Global <- mean(df_costs_base$WTP_Opp_Upper)
> df_costs_base$WTP_Near_Infinite <- 10^10
> 
> # Using 1 iteration per draw
> iter <- 1
> 
> # Filter by countries with data for all three input data frames
> df_prevalence <- df_prevalence |>
+   filter(location_name %in% Reduce(intersect, list(
+     df_prevalence$location_name,
+     df_costs_base$location_name,
+     df_coverage_base$location_name
+   )))
> 
> # Get full country list
> countrylist <- unique(df_prevalence$location_name)
> 
> # Which WTP threshold to use?
> # NB: "Opp_Upper" corresponds to Pichon-Riviere opportunity cost method (base case)
> WTP_list <- c("Opp_Upper", "HCFI_Lower", "Near_Infinite")
> Threshold <- WTP_list[1]
> 
> WTP <- df_costs_base |>
+   select(
+     location_name,
+     paste0("WTP_", Threshold)
+   ) |>
+   rename(
+     Country = location_name,
+     WTP = paste0("WTP_", Threshold)
+   )
> 
> 
> # List of interventions:
> interventions <- c(
+   "Iron_Preg", # Iron and folic acid supplementation in pregnant women
+   "Iron_WRA", # Iron supplementation in WRA
+   "Fortification", # Staple food supplementation in all individuals
+   "Antimalarial" # Antenatal intermittent antimalarials
+ )
> 
> # Set number of iterations
> n <- 400
> 
> # Prepare parallel computing
> cores <- detectCores()
> cl <- makeCluster(10)
> registerDoParallel(cl)
> 
> # Run model
> set.seed(888)
> sim_results <- foreach(
+   j = 1:n, .combine = "comb", .multicombine = TRUE, .init = list(list(), list()),
+   .export = ls(), .packages = c("tidyverse", "EnvStats")
+ ) %dopar% {
+   tryCatch(source("1_Run_model.R", local = T))
+   
+   list(
+     df_final |>
+       rename(
+         Pop_pregnant_anaemic_post = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_post = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_post = Pop_anaemic,
+         YLD_post = YLD
+       ) |>
+       full_join(df_2030,
+                 by = join_by(location_name, rei_name, Pop_wra, Pop_total, Pop_pregnant)
+       ) |>
+       mutate(
+         Change_anaemic = Pop_anaemic_post - Pop_anaemic,
+         Pct_change_anaemic = Change_anaemic / Pop_anaemic
+       ) |>
+       rename(
+         Country = location_name,
+         Anaemia_severity = rei_name,
+         Pop_pregnant_anaemic_pre = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_pre = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_pre = Pop_anaemic,
+         YLD_pre = YLD
+       ) |>
+       group_by(Country) |>
+       summarise(
+         anaemic_pre = sum(Pop_anaemic_pre),
+         anaemic_post = sum(Pop_anaemic_post),
+         YLD_pre = sum(YLD_pre),
+         YLD_post = sum(YLD_post)
+       ) |>
+       mutate(
+         Pct_change_anaemic = (anaemic_pre - anaemic_post) / anaemic_pre,
+         DALYs_averted = YLD_post - YLD_pre,
+         Pct_change_YLD = (YLD_pre - YLD_post) / YLD_pre,
+         Iteration = j
+       ),
+     cea |>
+       mutate(Iteration = j)
+   )
+ }
There were 14 warnings (use warnings() to see them)
> 
> results <- do.call(rbind, sim_results[[1]])
> if (Threshold == "Opp_Upper") {
+   league_tables <- do.call(rbind, sim_results[[2]])
+   write_csv(league_tables, file = "./Sensitivity_analysis/league_tables.csv")
+ }
> 
> if (nrow(results) > nrow(na.omit(results))) results <- replace_empty(results)
> 
> write_csv(results, file = paste0("./Sensitivity_analysis/sim_results_", Threshold, ".csv"))
> 
> 
> change <- results |>
+   group_by(Country) |>
+   summarise(
+     change_median = median(Pct_change_anaemic, na.rm = T),
+     change_low = quantile(Pct_change_anaemic, 0.025, na.rm = T),
+     change_high = quantile(Pct_change_anaemic, 0.975, na.rm = T),
+     DALYs_prevented_median = median(DALYs_averted, na.rm = T),
+     DALYs_prevented_low = quantile(DALYs_averted, 0.975, na.rm = T),
+     DALYs_prevented_high = quantile(DALYs_averted, 0.025, na.rm = T)
+   )
> 
> write_csv(change, file = paste0("./Sensitivity_analysis/targets_", Threshold, ".csv"))
> mean(change$change_median)
[1] 0.1755
> options(scipen = 999, digits = 5)
> 
> library(countrycode)
> library(EnvStats)
> library(tidyverse)
> library(scales)
> library(foreach)
> library(doParallel)
> 
> # Load helper functions
> source("./99_Functions.R")
> 
> # Read in 2030 population estimates, costs, and coverage
> df_prevalence <- readRDS("./Data/est_2030.rds")
> df_costs_base <- readRDS("./Data/costs.rds")
> df_coverage_base <- readRDS("./Data/coverage.rds")
> df_coverage_base[,c(3, 5, 7, 9)] <- 0
> 
> # Add a global WTP threshold
> df_costs_base$WTP_Global <- mean(df_costs_base$WTP_Opp_Upper)
> df_costs_base$WTP_Near_Infinite <- 10^10
> 
> # Using 1 iteration per draw
> iter <- 1
> 
> # Filter by countries with data for all three input data frames
> df_prevalence <- df_prevalence |>
+   filter(location_name %in% Reduce(intersect, list(
+     df_prevalence$location_name,
+     df_costs_base$location_name,
+     df_coverage_base$location_name
+   )))
> 
> # Get full country list
> countrylist <- unique(df_prevalence$location_name)
> 
> # Which WTP threshold to use?
> # NB: "Opp_Upper" corresponds to Pichon-Riviere opportunity cost method (base case)
> WTP_list <- c("Opp_Upper", "HCFI_Lower", "Near_Infinite")
> Threshold <- WTP_list[2]
> 
> WTP <- df_costs_base |>
+   select(
+     location_name,
+     paste0("WTP_", Threshold)
+   ) |>
+   rename(
+     Country = location_name,
+     WTP = paste0("WTP_", Threshold)
+   )
> 
> 
> # List of interventions:
> interventions <- c(
+   "Iron_Preg", # Iron and folic acid supplementation in pregnant women
+   "Iron_WRA", # Iron supplementation in WRA
+   "Fortification", # Staple food supplementation in all individuals
+   "Antimalarial" # Antenatal intermittent antimalarials
+ )
> 
> # Set number of iterations
> n <- 400
> 
> # Prepare parallel computing
> cores <- detectCores()
> cl <- makeCluster(10)
> registerDoParallel(cl)
> 
> # Run model
> set.seed(888)
> sim_results <- foreach(
+   j = 1:n, .combine = "comb", .multicombine = TRUE, .init = list(list(), list()),
+   .export = ls(), .packages = c("tidyverse", "EnvStats")
+ ) %dopar% {
+   tryCatch(source("1_Run_model.R", local = T))
+   
+   list(
+     df_final |>
+       rename(
+         Pop_pregnant_anaemic_post = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_post = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_post = Pop_anaemic,
+         YLD_post = YLD
+       ) |>
+       full_join(df_2030,
+                 by = join_by(location_name, rei_name, Pop_wra, Pop_total, Pop_pregnant)
+       ) |>
+       mutate(
+         Change_anaemic = Pop_anaemic_post - Pop_anaemic,
+         Pct_change_anaemic = Change_anaemic / Pop_anaemic
+       ) |>
+       rename(
+         Country = location_name,
+         Anaemia_severity = rei_name,
+         Pop_pregnant_anaemic_pre = Pop_pregnant_anaemic,
+         Pop_pregnant_malaria_anaemic_pre = Pop_pregnant_malaria_anaemic,
+         Pop_anaemic_pre = Pop_anaemic,
+         YLD_pre = YLD
+       ) |>
+       group_by(Country) |>
+       summarise(
+         anaemic_pre = sum(Pop_anaemic_pre),
+         anaemic_post = sum(Pop_anaemic_post),
+         YLD_pre = sum(YLD_pre),
+         YLD_post = sum(YLD_post)
+       ) |>
+       mutate(
+         Pct_change_anaemic = (anaemic_pre - anaemic_post) / anaemic_pre,
+         DALYs_averted = YLD_post - YLD_pre,
+         Pct_change_YLD = (YLD_pre - YLD_post) / YLD_pre,
+         Iteration = j
+       ),
+     cea |>
+       mutate(Iteration = j)
+   )
+ }
Warning messages:
1: In for (i in 1:length(args)) { :
  closing unused connection 26 (<-ParsasROGG16:11072)
2: In for (i in 1:length(args)) { :
  closing unused connection 25 (<-ParsasROGG16:11072)
3: In for (i in 1:length(args)) { :
  closing unused connection 24 (<-ParsasROGG16:11072)
4: In for (i in 1:length(args)) { :
  closing unused connection 23 (<-ParsasROGG16:11072)
5: In for (i in 1:length(args)) { :
  closing unused connection 12 (<-ParsasROGG16:11072)
6: In for (i in 1:length(args)) { :
  closing unused connection 11 (<-ParsasROGG16:11072)
7: In for (i in 1:length(args)) { :
  closing unused connection 10 (<-ParsasROGG16:11072)
8: In for (i in 1:length(args)) { :
  closing unused connection 9 (<-ParsasROGG16:11072)
9: In for (i in 1:length(args)) { :
  closing unused connection 8 (<-ParsasROGG16:11072)
10: In for (i in 1:length(args)) { :
  closing unused connection 7 (<-ParsasROGG16:11072)
> 
> results <- do.call(rbind, sim_results[[1]])
> if (Threshold == "Opp_Upper") {
+   league_tables <- do.call(rbind, sim_results[[2]])
+   write_csv(league_tables, file = "./Sensitivity_analysis/league_tables.csv")
+ }
> 
> if (nrow(results) > nrow(na.omit(results))) results <- replace_empty(results)
> 
> write_csv(results, file = paste0("./Sensitivity_analysis/sim_results_", Threshold, ".csv"))
> 
> 
> change <- results |>
+   group_by(Country) |>
+   summarise(
+     change_median = median(Pct_change_anaemic, na.rm = T),
+     change_low = quantile(Pct_change_anaemic, 0.025, na.rm = T),
+     change_high = quantile(Pct_change_anaemic, 0.975, na.rm = T),
+     DALYs_prevented_median = median(DALYs_averted, na.rm = T),
+     DALYs_prevented_low = quantile(DALYs_averted, 0.975, na.rm = T),
+     DALYs_prevented_high = quantile(DALYs_averted, 0.025, na.rm = T)
+   )
> 
> write_csv(change, file = paste0("./Sensitivity_analysis/targets_", Threshold, ".csv"))
> mean(change$change_median)
[1] 0.23818